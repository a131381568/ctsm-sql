import psql from './psql-adapter';

function dbGetPostList() {
  const postQuery = 'select postid, title, catgoryname, catgoryid, updatetime from science';
  return psql.manyOrNone(postQuery);
}


const postListQuery = 'select postid, title, catgoryname, catgoryid, updatetime from science';
const postList = psql.manyOrNone(postListQuery);


const users = [
  {
    id: 28456,
    name: "aaaa",
    age: 18,
    friendIds: [28457, 28458, 28460]
  },
  {
    id: 28457,
    name: "bbb",
    age: 19,
    friendIds: [28460]
  },
  {
    id: 28458,
    name: "cccc",
    age: 20,
    friendIds: [28459, 28460]
  },
  {
    id: 28459,
    name: "dd",
    age: 21,
    friendIds: [28456]
  },
  {
    id: 28460,
    name: "e",
    age: 22,
    friendIds: [28456, 28457]
  }
]

const resolvers = {
  Query: {
    getPostList: async () => {
      // const result = dbGetPostList()
      // return result
      return postList
    },
    getPostListPagi: async (_, args) => {
      const { count, pagi } = args
      const nowOffset = (pagi - 1) * count
      // const totalCountQuery = 'select count(*) from science'
      // const totalCount = await psql.manyOrNone(totalCountQuery);
      // let totalPagi = totalCount[0].count / 2
      const postQuery = `select * from science where orderId >= 1 order by orderId limit ${count} offset ${nowOffset}`
      let nowPagiList = await psql.manyOrNone(postQuery);
      return nowPagiList
    },
    searchCatPost: async (_, args) => {
      // const result = await dbGetPostList()
      const result = await postList
      const { catgoryid } = args
      const filterList = result.filter((item) => item.catgoryid === catgoryid)
      return filterList;
    },
    getSinglePost: async (_, args) => {
      // const result = await dbGetPostList()
      const result = await postList
      const { postid } = args
      const filterList = result.filter((item) => item.postid === postid)[0]
      return filterList;
    },
    ////////////
    users: () => users
  },
  Mutation: {
    addUser: (root, args, context) => {
      const { id, name, age } = args;
      // 新增 post
      users.push({
        id,
        name,
        age,
      });
      return users[3];
    },
  },
  User: {
    friends: (parent, args, context) => {
      const { friendIds } = parent;
      return users.filter((user) => friendIds.includes(user.id));
    },
  }
}

export default resolvers;